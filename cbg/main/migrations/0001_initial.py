# Generated by Django 5.1 on 2025-08-21 23:55

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('city', models.CharField(max_length=80)),
                ('state', models.CharField(max_length=80)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='Golfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'verbose_name': 'Golfer',
                'verbose_name_plural': 'Golfers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CourseConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('effective_start', models.DateField(blank=True, null=True)),
                ('effective_end', models.DateField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.course')),
            ],
            options={
                'verbose_name': 'Course Config',
                'verbose_name_plural': 'Course Configs',
            },
        ),
        migrations.CreateModel(
            name='Hole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('par', models.IntegerField(validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(5)])),
                ('handicap', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('handicap9', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)])),
                ('yards', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='holes', to='main.courseconfig')),
            ],
            options={
                'verbose_name': 'Hole',
                'verbose_name_plural': 'Holes',
                'ordering': ['number'],
                'unique_together': {('config', 'number')},
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('slug', models.SlugField(blank=True, editable=False, max_length=80, unique=True)),
                ('managers', models.ManyToManyField(blank=True, related_name='managed_leagues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'leagues',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('year', models.IntegerField(primary_key=True, serialize=False)),
                ('course_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.courseconfig')),
                ('league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='main.league')),
            ],
            options={
                'verbose_name': 'Season',
                'verbose_name_plural': 'Seasons',
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('golfers', models.ManyToManyField(to='main.golfer')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.season')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('rained_out', models.BooleanField(default=False)),
                ('number', models.IntegerField()),
                ('is_front', models.BooleanField()),
                ('num_scores', models.IntegerField(blank=True, null=True)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.season')),
            ],
            options={
                'verbose_name': 'Week',
                'verbose_name_plural': 'Weeks',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfer')),
                ('hole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.hole')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Score',
                'verbose_name_plural': 'Scores',
                'unique_together': {('golfer', 'week', 'hole')},
            },
        ),
        migrations.CreateModel(
            name='Points',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfer')),
                ('hole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.hole')),
                ('opponent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='points_against', to='main.golfer')),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.score')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Point',
                'verbose_name_plural': 'Points',
                'unique_together': {('golfer', 'week', 'hole', 'opponent')},
            },
        ),
        migrations.CreateModel(
            name='Matchup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teams', models.ManyToManyField(to='main.team')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Matchup',
                'verbose_name_plural': 'Matchups',
                'ordering': ['-week__date'],
            },
        ),
        migrations.CreateModel(
            name='Handicap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handicap', models.FloatField()),
                ('golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfer')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Handicap',
                'verbose_name_plural': 'Handicaps',
                'ordering': ['-week__date'],
                'unique_together': {('golfer', 'week')},
            },
        ),
        migrations.CreateModel(
            name='GolferMatchup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_A', models.BooleanField(db_column='is_a', default=False)),
                ('is_teammate_subbing', models.BooleanField(default=False)),
                ('opponent_team_no_subs', models.BooleanField(default=False)),
                ('golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfer')),
                ('opponent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opponent', to='main.golfer')),
                ('subbing_for_golfer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subbing_for_golfer', to='main.golfer')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='week', to='main.week')),
            ],
            options={
                'verbose_name': 'Golfer Matchup',
                'verbose_name_plural': 'Golfer Matchups',
                'ordering': ['-week__date'],
                'unique_together': {('week', 'golfer', 'opponent')},
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('desc', models.TextField(max_length=480)),
                ('week', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Sub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no_sub', models.BooleanField(default=False)),
                ('absent_golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='absent', to='main.golfer')),
                ('sub_golfer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub', to='main.golfer')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Substitution',
                'verbose_name_plural': 'Substitutions',
                'ordering': ['-week__date'],
                'unique_together': {('week', 'absent_golfer')},
            },
        ),
        migrations.CreateModel(
            name='SkinEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winner', models.BooleanField(default=False)),
                ('golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfer')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Skin Entry',
                'verbose_name_plural': 'Skin Entries',
                'unique_together': {('golfer', 'week')},
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_sub', models.BooleanField(default=False)),
                ('gross', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('net', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('round_points', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('total_points', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfer')),
                ('golfer_matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfermatchup')),
                ('handicap', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.handicap')),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.matchup')),
                ('points', models.ManyToManyField(to='main.points')),
                ('subbing_for', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rounds_subbed_for', to='main.golfer')),
                ('scores', models.ManyToManyField(to='main.score')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Round',
                'verbose_name_plural': 'Rounds',
                'ordering': ['-week__date'],
                'unique_together': {('golfer_matchup', 'week')},
            },
        ),
        migrations.CreateModel(
            name='RandomDrawnTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('absent_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='absent_team', to='main.team')),
                ('drawn_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drawn_team', to='main.team')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Random Drawn Team',
                'verbose_name_plural': 'Random Drawn Teams',
                'ordering': ['-week__date'],
                'unique_together': {('week', 'absent_team')},
            },
        ),
        migrations.CreateModel(
            name='GameEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winner', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.game')),
                ('golfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.golfer')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.week')),
            ],
            options={
                'verbose_name': 'Game Entry',
                'verbose_name_plural': 'Game Entries',
                'unique_together': {('game', 'golfer', 'week')},
            },
        ),
    ]
